{
  "address": "0xaBaCaB92277D8A2B417ef8B0A5DD9cB758BE9B59",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AnunciarPremioCobrado",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idReto",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idNFT",
          "type": "uint256"
        }
      ],
      "name": "NFTMinteado",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Habitos.CumplioReto",
          "name": "resultado",
          "type": "uint8"
        }
      ],
      "name": "NotificacionDeGanador",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user1",
          "type": "address"
        }
      ],
      "name": "RetoCreado",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        }
      ],
      "name": "completarRetoDiario",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "crearReto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        }
      ],
      "name": "finalizarReto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRetosActivosPorUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        }
      ],
      "name": "reclamarPremio2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "retos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "enum Habitos.CumplioReto",
              "name": "cumplioReto",
              "type": "uint8"
            },
            {
              "internalType": "enum Habitos.CobroPremio",
              "name": "cobroPremio",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "cobroNFT",
              "type": "bool"
            },
            {
              "internalType": "bool[3]",
              "name": "dias",
              "type": "bool[3]"
            }
          ],
          "internalType": "struct Habitos.User",
          "name": "user",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "deposito",
          "type": "uint256"
        },
        {
          "internalType": "enum Habitos.State",
          "name": "estado",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "fechaComienzo",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indexReto",
          "type": "uint256"
        }
      ],
      "name": "retosActivoPorId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRetos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb592c36f5665f594856d7a5958188f09b7612be66890988b9508800c3de8843",
  "receipt": {
    "to": null,
    "from": "0x90301C6aDD30D2E8fB6F96c620B56970Dd037301",
    "contractAddress": "0xaBaCaB92277D8A2B417ef8B0A5DD9cB758BE9B59",
    "transactionIndex": 0,
    "gasUsed": "4780144",
    "logsBloom": "0x
    "blockHash": "0x40decd9a93079ccebd7abcf60bdb5de26a499f1cc1d9e24241813cb0dbd6c138",
    "transactionHash": "0xcb592c36f5665f594856d7a5958188f09b7612be66890988b9508800c3de8843",
    "logs": [],
    "blockNumber": 11961724,
    "cumulativeGasUsed": "4780144",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "8abb7166d489f2e4b00abfc6c9b35943",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AnunciarPremioCobrado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idReto\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idNFT\",\"type\":\"uint256\"}],\"name\":\"NFTMinteado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Habitos.CumplioReto\",\"name\":\"resultado\",\"type\":\"uint8\"}],\"name\":\"NotificacionDeGanador\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"}],\"name\":\"RetoCreado\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"}],\"name\":\"completarRetoDiario\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"crearReto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"}],\"name\":\"finalizarReto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRetosActivosPorUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"}],\"name\":\"reclamarPremio2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"retos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"enum Habitos.CumplioReto\",\"name\":\"cumplioReto\",\"type\":\"uint8\"},{\"internalType\":\"enum Habitos.CobroPremio\",\"name\":\"cobroPremio\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"cobroNFT\",\"type\":\"bool\"},{\"internalType\":\"bool[3]\",\"name\":\"dias\",\"type\":\"bool[3]\"}],\"internalType\":\"struct Habitos.User\",\"name\":\"user\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deposito\",\"type\":\"uint256\"},{\"internalType\":\"enum Habitos.State\",\"name\":\"estado\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fechaComienzo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexReto\",\"type\":\"uint256\"}],\"name\":\"retosActivoPorId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRetos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Habitos.sol\":\"Habitos\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/HABNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\ncontract HABNFT is ERC721 {\\r\\n    uint256 token_count;\\r\\n\\r\\n    uint maxSupply = 1000;\\r\\n\\r\\n    constructor() ERC721(\\\"HabitosNFT\\\", \\\"HAB\\\") {}\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return \\\"https://ipfs.io/ipfs/QmbmMFHEwtadq3hZkrmoBfxjn4zJw5gbzCBJ4sD3Utgw2k\\\";\\r\\n    }\\r\\n\\r\\n    function mintNFT(address to) internal returns (uint tokenID) {\\r\\n        require(token_count < maxSupply, \\\"No hay mas HabitosNFT :(\\\");\\r\\n        token_count  += 1;\\r\\n        _mint(to, token_count);\\r\\n        return token_count;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa3e2a8b591adc22c88541d13159ac192006844eaf1dd3c37730d097891f59e24\",\"license\":\"MIT\"},\"contracts/Habitos.sol\":{\"content\":\"// SPDX-License-Identifier: GLP-3.0\\r\\n\\r\\n// Version para un solo Usuario\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\nimport \\\"./HABNFT.sol\\\";\\r\\n\\r\\ncontract Habitos is HABNFT{\\r\\n\\r\\n    address author;\\r\\n    enum State {Empezado, Finalizado}\\r\\n    enum CumplioReto {NoSupero, Supero}\\r\\n    enum CobroPremio {NoCobrado, Cobrado}\\r\\n    uint montoReto = 1000000000000000000; //monto para ingresar al reto de 1 Celo (o Eth)\\r\\n    uint public totalRetos = 0;\\r\\n\\r\\n    mapping (address => uint[]) retosPorUser;\\r\\n    \\r\\n    constructor() {\\r\\n        author = msg.sender;\\r\\n    }\\r\\n\\r\\n   struct User {\\r\\n        address wallet;\\r\\n        CumplioReto cumplioReto;\\r\\n        CobroPremio cobroPremio;\\r\\n        bool cobroNFT;\\r\\n        bool[3] dias;\\r\\n    }\\r\\n    \\r\\n    struct Reto {\\r\\n        uint id;\\r\\n        string name;\\r\\n        User user;\\r\\n        uint deposito;\\r\\n        State estado;\\r\\n        uint fechaComienzo;\\r\\n    }\\r\\n\\r\\n    Reto[] public retos;\\r\\n\\r\\n    //evento crear nuevo reto\\r\\n    event RetoCreado(\\r\\n        uint id,\\r\\n        address user1\\r\\n    );\\r\\n        \\r\\n    //Evento Notifica idReto y si es o no Ganador una finalizado los dias.\\r\\n    event NotificacionDeGanador(\\r\\n        uint indexReto,\\r\\n        CumplioReto resultado\\r\\n    );\\r\\n\\r\\n    event AnunciarPremioCobrado (uint indexReto, address wallet);\\r\\n\\r\\n    event NFTMinteado(uint idReto, uint idNFT);\\r\\n\\r\\n    modifier onlyUser(uint indexReto) {\\r\\n        require(msg.sender == retos[indexReto].user.wallet, \\\"No es el Usuario del reto\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRetoEmpezado(uint indexReto) {\\r\\n        require(retos[indexReto].estado == State.Empezado, \\\"Este reto no esta en vigencia\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRetoFinalizado(uint indexReto) {\\r\\n        require(retos[indexReto].estado == State.Finalizado , \\\"El reto todavia no ha finalizado\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Crear un reto por un Usuario\\r\\n    function crearReto(string memory _name) payable public returns (uint) {\\r\\n        require(msg.value == montoReto, \\\"El monto depositado no es el correcto, se requiere 1 Celo\\\");\\r\\n        Reto memory nuevoReto = Reto(\\r\\n            totalRetos,                  // id del reto\\r\\n            _name,                      // Nombre del reto\\r\\n            User(msg.sender, CumplioReto.NoSupero, CobroPremio.NoCobrado, false, [false, false, false]),  //datos del User\\r\\n            msg.value,            // Cantidad de Eth\\r\\n            State.Empezado,        // Estado\\r\\n            block.timestamp        // Fecha de Comienzo\\r\\n            );\\r\\n        retos.push(nuevoReto);\\r\\n        emit RetoCreado(totalRetos, msg.sender);\\r\\n        retosPorUser[msg.sender].push(totalRetos);\\r\\n        totalRetos+=1;\\r\\n        return(totalRetos-1);\\r\\n    }\\r\\n\\r\\n  // De prueba puse un reto cada minuto, durante 3 minutos.\\r\\n    function completarRetoDiario(uint indexReto) public onlyRetoEmpezado(indexReto) onlyUser(indexReto) {\\r\\n        uint dia = calcularDia(indexReto);\\r\\n        require(dia < 3, \\\"Ya termino el tiempo del reto de 3 dias\\\");\\r\\n        require(retos[indexReto].user.dias[dia] == false, \\\"Ya se cumplio el reto del dia de hoy\\\");\\r\\n        retos[indexReto].user.dias[dia] = true;  \\r\\n    }\\r\\n\\r\\n    //Funcion para saber si el reto sigue activo o a finalizado\\r\\n    function retosActivoPorId(uint indexReto) public view onlyRetoEmpezado(indexReto) onlyUser(indexReto) returns(bool _status){\\r\\n        uint dia = calcularDia(indexReto);\\r\\n        return dia >= 3;\\r\\n    }\\r\\n\\r\\n    function calcularDia(uint indexReto) internal onlyRetoEmpezado(indexReto) view returns(uint) {\\r\\n        uint diasTranscurridos = (block.timestamp - retos[indexReto].fechaComienzo) / (1 minutes);\\r\\n        return diasTranscurridos;\\r\\n    }\\r\\n\\r\\n    function finalizarReto(uint indexReto) public onlyUser(indexReto) onlyRetoEmpezado(indexReto) {\\r\\n        require(calcularDia(indexReto) > 2, \\\"Todavia no transcurrio el tiempo total\\\");\\r\\n        retos[indexReto].estado = State.Finalizado;\\r\\n        calcularGanador(indexReto);\\r\\n        if (retos[indexReto].user.cumplioReto == CumplioReto.NoSupero){\\r\\n            delRetoInactivoUser(indexReto);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRetosActivosPorUser() public view returns(uint[] memory){\\r\\n        return retosPorUser[msg.sender];\\r\\n    }\\r\\n\\r\\n    function delRetoInactivoUser(uint indexReto) internal {\\r\\n        uint[] storage arreglo = retosPorUser[msg.sender];\\r\\n        for (uint i=0; i < arreglo.length; i++) {\\r\\n            if (arreglo[i] == indexReto) {\\r\\n                arreglo[i] = arreglo[arreglo.length-1];\\r\\n                arreglo.pop();\\r\\n            }\\r\\n        }\\r\\n        retosPorUser[msg.sender] = arreglo;\\r\\n    }\\r\\n\\r\\n    function calcularGanador(uint indexReto) internal {\\r\\n        retos[indexReto].user.cumplioReto = CumplioReto.Supero;\\r\\n        for (uint i=0; i < 3; i++) {\\r\\n            if (!retos[indexReto].user.dias[i]) {\\r\\n                retos[indexReto].user.cumplioReto = CumplioReto.NoSupero;\\r\\n            }\\r\\n        }                  \\r\\n        emit NotificacionDeGanador(\\r\\n            indexReto,\\r\\n            retos[indexReto].user.cumplioReto\\r\\n            );\\r\\n    }\\r\\n\\r\\n    //Claimear premio\\r\\n    function reclamarPremio2(uint indexReto) public onlyUser(indexReto) onlyRetoFinalizado(indexReto) {\\r\\n        require (retos[indexReto].user.cumplioReto == CumplioReto.Supero, \\\"El reto no fue superado por este usuario\\\");\\r\\n        require (retos[indexReto].user.cobroPremio == CobroPremio.NoCobrado, \\\"Este premio ya fue cobrado por este usuario\\\");\\r\\n            payable(retos[indexReto].user.wallet).transfer(montoReto);\\r\\n            retos[indexReto].deposito -= montoReto;\\r\\n            retos[indexReto].user.cobroPremio = CobroPremio.Cobrado; // se marca cobrado al User\\r\\n            delRetoInactivoUser(indexReto);\\r\\n            emit AnunciarPremioCobrado(indexReto, msg.sender); // se anuncia premio cobrado por el User\\r\\n        }\\r\\n\\r\\n    //Mint nft si supero el reto\\r\\n    function mint(uint indexReto) public onlyUser(indexReto) {\\r\\n        require(retos[indexReto].user.cumplioReto == CumplioReto.Supero, \\\"Usted no ha superado este reto\\\");\\r\\n        require(retos[indexReto].user.cobroNFT == false, \\\"Este NFT ya ha sido cobrado\\\");\\r\\n        uint idNFT = mintNFT(msg.sender);\\r\\n        retos[indexReto].user.cobroNFT = true;\\r\\n        emit NFTMinteado(indexReto, idNFT);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc08c1fe08bfbc601833506eb0529718571420f1c8baba95782aa8acace10f82b\",\"license\":\"GLP-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80636352211e116100ab578063b88d4fde1161006f578063b88d4fde1461043b578063c87b56dd14610464578063cff21203146104a1578063dbaa992f146104ca578063df845dd9146104f5578063e985e9c51461053757610135565b80636352211e1461034457806370a082311461038157806395d89b41146103be578063a0712d68146103e9578063a22cb4651461041257610135565b80630ce0a07a116100fd5780630ce0a07a146102315780631354bdf81461025c57806323b872dd1461028557806339cb3c9a146102ae57806342842e0e146102de57806351af4e9a1461030757610135565b806301ffc9a71461013a57806306fdde0314610177578063081812fc146101a2578063095ea7b3146101df5780630a5bad6c14610208575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190613c2b565b610574565b60405161016e9190614353565b60405180910390f35b34801561018357600080fd5b5061018c610656565b604051610199919061436e565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190613cbe565b6106e8565b6040516101d691906142ca565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190613bef565b61076d565b005b34801561021457600080fd5b5061022f600480360381019061022a9190613cbe565b610885565b005b34801561023d57600080fd5b50610246610e87565b6040516102539190614331565b60405180910390f35b34801561026857600080fd5b50610283600480360381019061027e9190613cbe565b610f1c565b005b34801561029157600080fd5b506102ac60048036038101906102a79190613ae9565b6112d6565b005b6102c860048036038101906102c39190613c7d565b611336565b6040516102d591906146d0565b60405180910390f35b3480156102ea57600080fd5b5061030560048036038101906103009190613ae9565b61178b565b005b34801561031357600080fd5b5061032e60048036038101906103299190613cbe565b6117ab565b60405161033b9190614353565b60405180910390f35b34801561035057600080fd5b5061036b60048036038101906103669190613cbe565b6119b2565b60405161037891906142ca565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190613a84565b611a64565b6040516103b591906146d0565b60405180910390f35b3480156103ca57600080fd5b506103d3611b1c565b6040516103e0919061436e565b60405180910390f35b3480156103f557600080fd5b50610410600480360381019061040b9190613cbe565b611bae565b005b34801561041e57600080fd5b5061043960048036038101906104349190613bb3565b611eec565b005b34801561044757600080fd5b50610462600480360381019061045d9190613b38565b611f02565b005b34801561047057600080fd5b5061048b60048036038101906104869190613cbe565b611f64565b604051610498919061436e565b60405180910390f35b3480156104ad57600080fd5b506104c860048036038101906104c39190613cbe565b611fce565b005b3480156104d657600080fd5b506104df612396565b6040516104ec91906146d0565b60405180910390f35b34801561050157600080fd5b5061051c60048036038101906105179190613cbe565b61239c565b60405161052e9695949392919061473d565b60405180910390f35b34801561054357600080fd5b5061055e60048036038101906105599190613aad565b612670565b60405161056b9190614353565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061063f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061064f575061064e82612704565b5b9050919050565b60606000805461066590614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461069190614ad7565b80156106de5780601f106106b3576101008083540402835291602001916106de565b820191906000526020600020905b8154815290600101906020018083116106c157829003601f168201915b5050505050905090565b60006106f38261276e565b610732576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610729906145d0565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610778826119b2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090614650565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108086127da565b73ffffffffffffffffffffffffffffffffffffffff1614806108375750610836816108316127da565b612670565b5b610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086d906144f0565b60405180910390fd5b61088083836127e2565b505050565b80600c81815481106108c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095990614550565b60405180910390fd5b8160018081111561099c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c82815481106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160050160009054906101000a900460ff166001811115610a2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6490614490565b60405180910390fd5b600180811115610aa6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8481548110610ae0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160149054906101000a900460ff166001811115610b3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7190614430565b60405180910390fd5b60006001811115610bb4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8481548110610bee577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160159054906101000a900460ff166001811115610c48577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610c88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7f90614570565b60405180910390fd5b600c8381548110610cc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6009549081150290604051600060405180830381858888f19350505050158015610d3e573d6000803e3d6000fd5b50600954600c8481548110610d7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702016004016000828254610d9c919061497e565b925050819055506001600c8481548110610ddf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160156101000a81548160ff02191690836001811115610e3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550610e498361289b565b7f168914fffbfad46639afcc9c0115ab22cab8a9074be0ad7e22fbfaca8b85d3938333604051610e7a9291906146eb565b60405180910390a1505050565b6060600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f1257602002820191906000526020600020905b815481526020019060010190808311610efe575b5050505050905090565b80600c8181548110610f57577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff090614550565b60405180910390fd5b8160006001811115611034577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c828154811061106e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160050160009054906101000a900460ff1660018111156110c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc90614390565b60405180910390fd5b600261111084612a88565b11611150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611147906145f0565b60405180910390fd5b6001600c848154811061118c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160050160006101000a81548160ff021916908360018111156111e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506111f383612c07565b6000600181111561122d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8481548110611267577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160149054906101000a900460ff1660018111156112c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156112d1576112d08361289b565b5b505050565b6112e76112e16127da565b82612e99565b611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90614690565b60405180910390fd5b611331838383612f77565b505050565b6000600954341461137c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611373906146b0565b60405180910390fd5b60006040518060c00160405280600a5481526020018481526020016040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600060018111156113f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815260200160006001811115611437577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000151581526020016040518060600160405280600015151515815260200160001515151581526020016000151515158152508152508152602001348152602001600060018111156114b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001428152509050600c8190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010190805190602001906115149291906137bd565b5060408201518160020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360018111156115b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060408201518160000160156101000a81548160ff0219169083600181111561160c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060608201518160000160166101000a81548160ff021916908315150217905550608082015181600101906003611648929190613843565b5050506060820151816004015560808201518160050160006101000a81548160ff021916908360018111156116a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060a0820151816006015550507f381a61e27db90363367908ad325aa61cbb84246330929930a82a9d592eb3af98600a54336040516116ea9291906146eb565b60405180910390a1600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a5490806001815401808255809150506001900390600052602060002001600090919091909150556001600a600082825461176d91906148f7565b925050819055506001600a54611783919061497e565b915050919050565b6117a683838360405180602001604052806000815250611f02565b505050565b600081600060018111156117e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8281548110611822577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160050160009054906101000a900460ff166001811115611879577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b090614390565b60405180910390fd5b82600c81815481106118f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198d90614550565b60405180910390fd5b60006119a185612a88565b905060038110159350505050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5290614530565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acc90614510565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054611b2b90614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5790614ad7565b8015611ba45780601f10611b7957610100808354040283529160200191611ba4565b820191906000526020600020905b815481529060010190602001808311611b8757829003601f168201915b5050505050905090565b80600c8181548110611be9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8290614550565b60405180910390fd5b600180811115611cc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8381548110611cfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160149054906101000a900460ff166001811115611d58577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f90614630565b60405180910390fd5b60001515600c8381548110611dd6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160169054906101000a900460ff16151514611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e31906145b0565b60405180910390fd5b6000611e45336131de565b90506001600c8481548110611e83577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160166101000a81548160ff0219169083151502179055507f4c80e5f3ca81b9182a3fdddf2ecbaebaf7b139c1a32883aedc0fc76738b18f7f8382604051611edf9291906147a9565b60405180910390a1505050565b611efe611ef76127da565b8383613256565b5050565b611f13611f0d6127da565b83612e99565b611f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4990614690565b60405180910390fd5b611f5e848484846133c3565b50505050565b6060611f6f8261276e565b611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590614610565b60405180910390fd5b6040518060800160405280604381526020016153c8604391399050919050565b8060006001811115612009577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8281548110612043577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160050160009054906101000a900460ff16600181111561209a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d190614390565b60405180910390fd5b81600c8181548110612115577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ae90614550565b60405180910390fd5b60006121c284612a88565b905060038110612207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fe90614670565b60405180910390fd5b60001515600c8581548110612245577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702016002016001018260038110612291577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602091828204019190069054906101000a900460ff161515146122e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e0906144d0565b60405180910390fd5b6001600c8581548110612325577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702016002016001018260038110612371577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602091828204019190066101000a81548160ff02191690831515021790555050505050565b600a5481565b600c81815481106123ac57600080fd5b90600052602060002090600702016000915090508060000154908060010180546123d590614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461240190614ad7565b801561244e5780601f106124235761010080835404028352916020019161244e565b820191906000526020600020905b81548152906001019060200180831161243157829003601f168201915b505050505090806002016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff166001811115612504577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181111561253c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160159054906101000a900460ff16600181111561258b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156125c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160169054906101000a900460ff1615151515815260200160018201600380602002604051908101604052809291908260038015612643576020028201916000905b82829054906101000a900460ff1615158152602001906001019060208260000104928301926001038202915080841161260d5790505b505050505081525050908060040154908060050160009054906101000a900460ff16908060060154905086565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612855836119b2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015612a345782828281548110612927577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001541415612a2157816001838054905061294a919061497e565b81548110612981577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548282815481106129c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081805480612a0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590555b8080612a2c90614b3a565b9150506128e1565b5080600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908054612a839291906138dc565b505050565b60008160006001811115612ac5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8281548110612aff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160050160009054906101000a900460ff166001811115612b56577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8d90614390565b60405180910390fd5b6000603c600c8581548110612bd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702016006015442612bf1919061497e565b612bfb919061494d565b90508092505050919050565b6001600c8281548110612c43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160146101000a81548160ff02191690836001811115612c9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060005b6003811015612e0157600c8281548110612cea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600702016002016001018160038110612d36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602091828204019190069054906101000a900460ff16612dee576000600c8381548110612d8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160146101000a81548160ff02191690836001811115612de8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505b8080612df990614b3a565b915050612ca7565b507fc8b5313552b8be7e6e143e65bc134fdc90527c98af49273034db575290206afe81600c8381548110612e5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906007020160020160000160149054906101000a900460ff16604051612e8e929190614714565b60405180910390a150565b6000612ea48261276e565b612ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eda906144b0565b60405180910390fd5b6000612eee836119b2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612f5d57508373ffffffffffffffffffffffffffffffffffffffff16612f45846106e8565b73ffffffffffffffffffffffffffffffffffffffff16145b80612f6e5750612f6d8185612670565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612f97826119b2565b73ffffffffffffffffffffffffffffffffffffffff1614612fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe4906143d0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561305d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305490614450565b60405180910390fd5b61306883838361341f565b6130736000826127e2565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130c3919061497e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461311a91906148f7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46131d9838383613424565b505050565b600060075460065410613226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161321d906143f0565b60405180910390fd5b60016006600082825461323991906148f7565b9250508190555061324c82600654613429565b6006549050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132bc90614470565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516133b69190614353565b60405180910390a3505050565b6133ce848484612f77565b6133da84848484613603565b613419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613410906143b0565b60405180910390fd5b50505050565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349090614590565b60405180910390fd5b6134a28161276e565b156134e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134d990614410565b60405180910390fd5b6134ee6000838361341f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461353e91906148f7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46135ff60008383613424565b5050565b60006136248473ffffffffffffffffffffffffffffffffffffffff1661379a565b1561378d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261364d6127da565b8786866040518563ffffffff1660e01b815260040161366f94939291906142e5565b602060405180830381600087803b15801561368957600080fd5b505af19250505080156136ba57506040513d601f19601f820116820180604052508101906136b79190613c54565b60015b61373d573d80600081146136ea576040519150601f19603f3d011682016040523d82523d6000602084013e6136ef565b606091505b50600081511415613735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161372c906143b0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613792565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546137c990614ad7565b90600052602060002090601f0160209004810192826137eb5760008555613832565b82601f1061380457805160ff1916838001178555613832565b82800160010185558215613832579182015b82811115613831578251825591602001919060010190613816565b5b50905061383f919061392e565b5090565b826003601f016020900481019282156138cb5791602002820160005b8382111561389c57835183826101000a81548160ff021916908315150217905550926020019260010160208160000104928301926001030261385f565b80156138c95782816101000a81549060ff021916905560010160208160000104928301926001030261389c565b505b5090506138d8919061392e565b5090565b82805482825590600052602060002090810192821561391d5760005260206000209182015b8281111561391c578254825591600101919060010190613901565b5b50905061392a919061392e565b5090565b5b8082111561394757600081600090555060010161392f565b5090565b600061395e613959846147f7565b6147d2565b90508281526020810184848401111561397657600080fd5b613981848285614a95565b509392505050565b600061399c61399784614828565b6147d2565b9050828152602081018484840111156139b457600080fd5b6139bf848285614a95565b509392505050565b6000813590506139d68161536b565b92915050565b6000813590506139eb81615382565b92915050565b600081359050613a0081615399565b92915050565b600081519050613a1581615399565b92915050565b600082601f830112613a2c57600080fd5b8135613a3c84826020860161394b565b91505092915050565b600082601f830112613a5657600080fd5b8135613a66848260208601613989565b91505092915050565b600081359050613a7e816153b0565b92915050565b600060208284031215613a9657600080fd5b6000613aa4848285016139c7565b91505092915050565b60008060408385031215613ac057600080fd5b6000613ace858286016139c7565b9250506020613adf858286016139c7565b9150509250929050565b600080600060608486031215613afe57600080fd5b6000613b0c868287016139c7565b9350506020613b1d868287016139c7565b9250506040613b2e86828701613a6f565b9150509250925092565b60008060008060808587031215613b4e57600080fd5b6000613b5c878288016139c7565b9450506020613b6d878288016139c7565b9350506040613b7e87828801613a6f565b925050606085013567ffffffffffffffff811115613b9b57600080fd5b613ba787828801613a1b565b91505092959194509250565b60008060408385031215613bc657600080fd5b6000613bd4858286016139c7565b9250506020613be5858286016139dc565b9150509250929050565b60008060408385031215613c0257600080fd5b6000613c10858286016139c7565b9250506020613c2185828601613a6f565b9150509250929050565b600060208284031215613c3d57600080fd5b6000613c4b848285016139f1565b91505092915050565b600060208284031215613c6657600080fd5b6000613c7484828501613a06565b91505092915050565b600060208284031215613c8f57600080fd5b600082013567ffffffffffffffff811115613ca957600080fd5b613cb584828501613a45565b91505092915050565b600060208284031215613cd057600080fd5b6000613cde84828501613a6f565b91505092915050565b6000613cf38383613dea565b60208301905092915050565b6000613d0b83836142ac565b60208301905092915050565b613d20816149b2565b82525050565b613d2f816149b2565b82525050565b613d3e81614873565b613d4881846148b9565b9250613d5382614859565b8060005b83811015613d84578151613d6b8782613ce7565b9650613d768361489f565b925050600181019050613d57565b505050505050565b6000613d978261487e565b613da181856148c4565b9350613dac83614863565b8060005b83811015613ddd578151613dc48882613cff565b9750613dcf836148ac565b925050600181019050613db0565b5085935050505092915050565b613df3816149c4565b82525050565b613e02816149c4565b82525050565b6000613e1382614889565b613e1d81856148d5565b9350613e2d818560208601614aa4565b613e3681614c6e565b840191505092915050565b613e4a81614a5f565b82525050565b613e5981614a71565b82525050565b613e6881614a71565b82525050565b613e7781614a83565b82525050565b6000613e8882614894565b613e9281856148e6565b9350613ea2818560208601614aa4565b613eab81614c6e565b840191505092915050565b6000613ec3601d836148e6565b9150613ece82614c7f565b602082019050919050565b6000613ee66032836148e6565b9150613ef182614ca8565b604082019050919050565b6000613f096025836148e6565b9150613f1482614cf7565b604082019050919050565b6000613f2c6018836148e6565b9150613f3782614d46565b602082019050919050565b6000613f4f601c836148e6565b9150613f5a82614d6f565b602082019050919050565b6000613f726028836148e6565b9150613f7d82614d98565b604082019050919050565b6000613f956024836148e6565b9150613fa082614de7565b604082019050919050565b6000613fb86019836148e6565b9150613fc382614e36565b602082019050919050565b6000613fdb6020836148e6565b9150613fe682614e5f565b602082019050919050565b6000613ffe602c836148e6565b915061400982614e88565b604082019050919050565b60006140216024836148e6565b915061402c82614ed7565b604082019050919050565b60006140446038836148e6565b915061404f82614f26565b604082019050919050565b6000614067602a836148e6565b915061407282614f75565b604082019050919050565b600061408a6029836148e6565b915061409582614fc4565b604082019050919050565b60006140ad6019836148e6565b91506140b882615013565b602082019050919050565b60006140d0602b836148e6565b91506140db8261503c565b604082019050919050565b60006140f36020836148e6565b91506140fe8261508b565b602082019050919050565b6000614116601b836148e6565b9150614121826150b4565b602082019050919050565b6000614139602c836148e6565b9150614144826150dd565b604082019050919050565b600061415c6026836148e6565b91506141678261512c565b604082019050919050565b600061417f602f836148e6565b915061418a8261517b565b604082019050919050565b60006141a2601e836148e6565b91506141ad826151ca565b602082019050919050565b60006141c56021836148e6565b91506141d0826151f3565b604082019050919050565b60006141e86027836148e6565b91506141f382615242565b604082019050919050565b600061420b6031836148e6565b915061421682615291565b604082019050919050565b600061422e6039836148e6565b9150614239826152e0565b604082019050919050565b60e08201600082015161425a6000850182613d17565b50602082015161426d6020850182613e50565b5060408201516142806040850182613e41565b5060608201516142936060850182613dea565b5060808201516142a66080850182613d35565b50505050565b6142b581614a55565b82525050565b6142c481614a55565b82525050565b60006020820190506142df6000830184613d26565b92915050565b60006080820190506142fa6000830187613d26565b6143076020830186613d26565b61431460408301856142bb565b81810360608301526143268184613e08565b905095945050505050565b6000602082019050818103600083015261434b8184613d8c565b905092915050565b60006020820190506143686000830184613df9565b92915050565b600060208201905081810360008301526143888184613e7d565b905092915050565b600060208201905081810360008301526143a981613eb6565b9050919050565b600060208201905081810360008301526143c981613ed9565b9050919050565b600060208201905081810360008301526143e981613efc565b9050919050565b6000602082019050818103600083015261440981613f1f565b9050919050565b6000602082019050818103600083015261442981613f42565b9050919050565b6000602082019050818103600083015261444981613f65565b9050919050565b6000602082019050818103600083015261446981613f88565b9050919050565b6000602082019050818103600083015261448981613fab565b9050919050565b600060208201905081810360008301526144a981613fce565b9050919050565b600060208201905081810360008301526144c981613ff1565b9050919050565b600060208201905081810360008301526144e981614014565b9050919050565b6000602082019050818103600083015261450981614037565b9050919050565b600060208201905081810360008301526145298161405a565b9050919050565b600060208201905081810360008301526145498161407d565b9050919050565b60006020820190508181036000830152614569816140a0565b9050919050565b60006020820190508181036000830152614589816140c3565b9050919050565b600060208201905081810360008301526145a9816140e6565b9050919050565b600060208201905081810360008301526145c981614109565b9050919050565b600060208201905081810360008301526145e98161412c565b9050919050565b600060208201905081810360008301526146098161414f565b9050919050565b6000602082019050818103600083015261462981614172565b9050919050565b6000602082019050818103600083015261464981614195565b9050919050565b60006020820190508181036000830152614669816141b8565b9050919050565b60006020820190508181036000830152614689816141db565b9050919050565b600060208201905081810360008301526146a9816141fe565b9050919050565b600060208201905081810360008301526146c981614221565b9050919050565b60006020820190506146e560008301846142bb565b92915050565b600060408201905061470060008301856142bb565b61470d6020830184613d26565b9392505050565b600060408201905061472960008301856142bb565b6147366020830184613e5f565b9392505050565b60006101808201905061475360008301896142bb565b81810360208301526147658188613e7d565b90506147746040830187614244565b6147826101208301866142bb565b614790610140830185613e6e565b61479e6101608301846142bb565b979650505050505050565b60006040820190506147be60008301856142bb565b6147cb60208301846142bb565b9392505050565b60006147dc6147ed565b90506147e88282614b09565b919050565b6000604051905090565b600067ffffffffffffffff82111561481257614811614c3f565b5b61481b82614c6e565b9050602081019050919050565b600067ffffffffffffffff82111561484357614842614c3f565b5b61484c82614c6e565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060039050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061490282614a55565b915061490d83614a55565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561494257614941614b83565b5b828201905092915050565b600061495882614a55565b915061496383614a55565b92508261497357614972614bb2565b5b828204905092915050565b600061498982614a55565b915061499483614a55565b9250828210156149a7576149a6614b83565b5b828203905092915050565b60006149bd82614a35565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050614a0a8261532f565b919050565b6000819050614a1d82615343565b919050565b6000819050614a3082615357565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614a6a826149fc565b9050919050565b6000614a7c82614a0f565b9050919050565b6000614a8e82614a22565b9050919050565b82818337600083830152505050565b60005b83811015614ac2578082015181840152602081019050614aa7565b83811115614ad1576000848401525b50505050565b60006002820490506001821680614aef57607f821691505b60208210811415614b0357614b02614c10565b5b50919050565b614b1282614c6e565b810181811067ffffffffffffffff82111715614b3157614b30614c3f565b5b80604052505050565b6000614b4582614a55565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b7857614b77614b83565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45737465207265746f206e6f206573746120656e20766967656e636961000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20686179206d61732048616269746f734e4654203a280000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f456c207265746f206e6f2066756520737570657261646f20706f72206573746560008201527f207573756172696f000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f456c207265746f20746f6461766961206e6f2068612066696e616c697a61646f600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f59612073652063756d706c696f20656c207265746f2064656c2064696120646560008201527f20686f7900000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f20657320656c205573756172696f2064656c207265746f00000000000000600082015250565b7f45737465207072656d696f2079612066756520636f627261646f20706f72206560008201527f737465207573756172696f000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45737465204e4654207961206861207369646f20636f627261646f0000000000600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f546f6461766961206e6f207472616e7363757272696f20656c207469656d706f60008201527f20746f74616c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f5573746564206e6f20686120737570657261646f2065737465207265746f0000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f5961207465726d696e6f20656c207469656d706f2064656c207265746f20646560008201527f2033206469617300000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f456c206d6f6e746f206465706f73697461646f206e6f20657320656c20636f7260008201527f726563746f2c20736520726571756965726520312043656c6f00000000000000602082015250565b600281106153405761533f614be1565b5b50565b6002811061535457615353614be1565b5b50565b6002811061536857615367614be1565b5b50565b615374816149b2565b811461537f57600080fd5b50565b61538b816149c4565b811461539657600080fd5b50565b6153a2816149d0565b81146153ad57600080fd5b50565b6153b981614a55565b81146153c457600080fd5b5056fe68747470733a2f2f697066732e696f2f697066732f516d626d4d464845777461647133685a6b726d6f4266786a6e347a4a773567627a43424a3473443355746777326ba26469706673582212204a7aab0296aaeb577cc46ddd5ee8a4ec73fd54d9788b5de11ca326780ae8a69f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1589,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "token_count",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "maxSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1652,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "author",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1664,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "montoReto",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1667,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "totalRetos",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1672,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "retosPorUser",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1715,
        "contract": "contracts/Habitos.sol:Habitos",
        "label": "retos",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Reto)1711_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reto)1711_storage)dyn_storage": {
        "base": "t_struct(Reto)1711_storage",
        "encoding": "dynamic_array",
        "label": "struct Habitos.Reto[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(CobroPremio)1661": {
        "encoding": "inplace",
        "label": "enum Habitos.CobroPremio",
        "numberOfBytes": "1"
      },
      "t_enum(CumplioReto)1658": {
        "encoding": "inplace",
        "label": "enum Habitos.CumplioReto",
        "numberOfBytes": "1"
      },
      "t_enum(State)1655": {
        "encoding": "inplace",
        "label": "enum Habitos.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Reto)1711_storage": {
        "encoding": "inplace",
        "label": "struct Habitos.Reto",
        "members": [
          {
            "astId": 1698,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1700,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1703,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "user",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(User)1696_storage"
          },
          {
            "astId": 1705,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "deposito",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1708,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "estado",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(State)1655"
          },
          {
            "astId": 1710,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "fechaComienzo",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(User)1696_storage": {
        "encoding": "inplace",
        "label": "struct Habitos.User",
        "members": [
          {
            "astId": 1683,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1686,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "cumplioReto",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(CumplioReto)1658"
          },
          {
            "astId": 1689,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "cobroPremio",
            "offset": 21,
            "slot": "0",
            "type": "t_enum(CobroPremio)1661"
          },
          {
            "astId": 1691,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "cobroNFT",
            "offset": 22,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1695,
            "contract": "contracts/Habitos.sol:Habitos",
            "label": "dias",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bool)3_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}